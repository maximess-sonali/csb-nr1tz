{"version":3,"sources":["CustomDatepicker.js","App.js","index.js"],"names":["CustomDatepicker","props","useEffect","handleCalendarSet","startDate","currentDayOfMonth","getDate","currentMonth","getMonth","currentYear","getFullYear","dateString","toString","length","getSeletedValue","useState","Date","setStartDate","selected","dateFormat","onSelect","date","onCalendarClose","customInput","type","onKeyUp","event","target","value","includes","dateArray","split","isNaN","parseInt","setVal","Object","prototype","call","getTime","App","selectedDate","setSelectedDate","className","val","rootElement","document","getElementById","ReactDOM","render"],"mappings":"0KA2EeA,MAtEf,SAA0BC,GAExBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAoB,WAGxB,GADU,GACI,MAAXC,EAAgB,CACjB,IAAMC,EAAoBD,EAAUE,UAC9BC,EAAeH,EAAUI,WACzBC,EAAcL,EAAUM,cACzBC,GACFN,EAAkBO,WAAWC,OAAS,EAAE,IAAIR,EAAkBA,GAC7D,MACEE,EAAe,GAAGK,WAAWC,OAAS,EAAE,KAAKN,EAAe,GAAIA,EAAe,GACjF,IACAE,EAEJR,EAAMa,gBAAgBH,KAkC1B,EAAkCI,mBAAS,IAAIC,MAA/C,mBAAOZ,EAAP,KAAkBa,EAAlB,KACA,OACE,mCACE,cAAC,IAAD,CACEC,SAAUd,EACVe,WAAW,aACXC,SAAU,SAACC,GAAD,OAAUJ,EAAaI,IACjCC,gBAAiBnB,EACjBoB,YAAc,uBACZC,KAAK,QACLC,QAtCY,SAAAC,GAClB,GAAGA,EAAMC,OAAOC,MAAMC,SAAS,MAAQH,EAAMC,OAAOC,MAAMC,SAAS,MAAQH,EAAMC,OAAOC,MAAMC,SAAS,KAAK,CAC1G,IAAIC,EAAU,GACVnB,EAAW,GAQf,GAPGe,EAAMC,OAAOC,MAAMC,SAAS,KAC7BC,EAAUJ,EAAMC,OAAOC,MAAMG,MAAM,KAC5BL,EAAMC,OAAOC,MAAMC,SAAS,KACnCC,EAAUJ,EAAMC,OAAOC,MAAMG,MAAM,KAC5BL,EAAMC,OAAOC,MAAMC,SAAS,OACnCC,EAAUJ,EAAMC,OAAOC,MAAMG,MAAM,MAEhB,GAAlBD,EAAUjB,QAA+B,GAAlBiB,EAAUjB,OAAU,CACvB,GAAlBiB,EAAUjB,QAAmC,GAArBmB,MAAMF,EAAU,KAAcG,SAASH,EAAU,KAAK,IAA6B,GAArBE,MAAMF,EAAU,KAAcG,SAASH,EAAU,KAAK,GAC7InB,EAAWmB,EAAU,GAAG,IAAIA,EAAU,GAAG,KAAI,IAAId,MAAON,cAC/B,GAAlBoB,EAAUjB,QAAmC,GAArBmB,MAAMF,EAAU,KAAcG,SAASH,EAAU,KAAK,IAA6B,GAArBE,MAAMF,EAAU,KAAcG,SAASH,EAAU,KAAK,IAA6B,GAArBE,MAAMF,EAAU,KAAmC,GAArBA,EAAU,GAAGjB,SACtMF,EAAWmB,EAAU,GAAG,IAAIA,EAAU,GAAG,IAAIA,EAAU,IAEzD,IAAII,EAAO,IAAIlB,KAAKL,GAC6B,kBAA3CwB,OAAOC,UAAUxB,SAASyB,KAAKH,KAC7BF,MAAME,EAAOI,YAEfrB,EAAaiB,cCjDZ,SAASK,IACtB,MAAwCxB,mBAAS,IAAjD,mBAAOyB,EAAP,KAAqBC,EAArB,KAIA,OACE,sBAAKC,UAAU,MAAf,UACE,2DAA8BF,KAC9B,cAAC,EAAD,CAAkB1B,gBANE,SAAC6B,GACvBF,EAAgBE,SCDpB,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACT,EAAD,MAEFK,K","file":"static/js/main.37e4ec0f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nlet yearCheckr=[];\nfunction CustomDatepicker(props) {\n\n  useEffect(() => {\n    handleCalendarSet();\n  }, [])\n\n  const handleCalendarSet = () => {\n   // console.log(startDate)\n   yearCheckr=[]\n    if(startDate!=null){\n      const currentDayOfMonth = startDate.getDate();\n      const currentMonth = startDate.getMonth();\n      const currentYear = startDate.getFullYear();    \n       let dateString =\n        (currentDayOfMonth.toString().length < 2?\"0\"+currentDayOfMonth:currentDayOfMonth)+\n          \"-\" +\n          ((currentMonth + 1).toString().length < 2?\"0\"+(currentMonth + 1):(currentMonth + 1))+\n          \"-\" +\n          currentYear\n      //console.log(\"Calendar closed\", dateString);\n      props.getSeletedValue(dateString);\n    }\n  }\n\n\n\n  const handleKeyUp = event => {\n    if(event.target.value.includes(\"-\") || event.target.value.includes(\"/\") || event.target.value.includes(\".\")){\n      let dateArray=[]\n      let dateString=\"\"\n      if(event.target.value.includes(\"-\")){\n        dateArray=event.target.value.split(\"-\")\n      }else if(event.target.value.includes(\"/\")){\n        dateArray=event.target.value.split(\"/\")\n      }else if(event.target.value.includes(\".\")){\n        dateArray=event.target.value.split(\".\")\n      }\n      if(dateArray.length==2 || dateArray.length==3){\n        if(dateArray.length==2 && (isNaN(dateArray[0])==false && parseInt(dateArray[0])<=31) && (isNaN(dateArray[1])==false && parseInt(dateArray[1])<=12)){\n          dateString=dateArray[1]+'-'+dateArray[0]+'-'+new Date().getFullYear();\n        }else if(dateArray.length==3 && (isNaN(dateArray[0])==false && parseInt(dateArray[0])<=31) && (isNaN(dateArray[1])==false && parseInt(dateArray[1])<=12) && (isNaN(dateArray[2])==false && dateArray[2].length==4)){\n          dateString=dateArray[1]+'-'+dateArray[0]+'-'+dateArray[2];\n        }\n        let setVal=new Date(dateString)\n          if (Object.prototype.toString.call(setVal) === \"[object Date]\") {\n            if (isNaN(setVal.getTime())) {\n            } else {\n              setStartDate(setVal);\n            }\n         }\n      }\n    }\n  }\n\n  const [startDate, setStartDate] = useState(new Date());\n  return (\n    <>\n      <DatePicker\n        selected={startDate}\n        dateFormat=\"dd-MM-yyyy\"\n        onSelect={(date) => setStartDate(date)}\n        onCalendarClose={handleCalendarSet}\n        customInput={ <input\n          type=\"input\"\n          onKeyUp={handleKeyUp}\n      />}\n      />\n    </>\n  );\n}\nexport default CustomDatepicker;\n","import React, { useState } from \"react\";\nimport CustomDatepicker from \"./CustomDatepicker\";\n\nexport default function App() {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const getSeletedValue = (val) => {\n    setSelectedDate(val);\n  };\n  return (\n    <div className=\"App\">\n      <div>Hello! selected date is {selectedDate}</div>\n      <CustomDatepicker getSeletedValue={getSeletedValue} />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}