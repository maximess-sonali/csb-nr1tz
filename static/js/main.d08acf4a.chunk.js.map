{"version":3,"sources":["CustomDatepicker.js","App.js","index.js"],"names":["CustomDatepicker","props","useEffect","handleCalendarSet","startDate","currentDayOfMonth","getDate","currentMonth","getMonth","currentYear","getFullYear","dateString","toString","length","getSeletedValue","useState","Date","setStartDate","selected","dateFormat","onSelect","date","onCalendarClose","customInput","type","onKeyUp","event","target","value","includes","dateArray","split","isNaN","parseInt","setVal","Object","prototype","call","getTime","App","selectedDate","setSelectedDate","className","val","rootElement","document","getElementById","ReactDOM","render"],"mappings":"sMAyFeA,MArFf,SAA0BC,GACxBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAoB,WACxB,GAAiB,MAAbC,EAAmB,CACrB,IAAMC,EAAoBD,EAAUE,UAC9BC,EAAeH,EAAUI,WACzBC,EAAcL,EAAUM,cAC1BC,GACDN,EAAkBO,WAAWC,OAAS,EACnC,IAAMR,EACNA,GACJ,MACEE,EAAe,GAAGK,WAAWC,OAAS,EACpC,KAAON,EAAe,GACtBA,EAAe,GACnB,IACAE,EAEFR,EAAMa,gBAAgBH,KAmD1B,EAAkCI,mBAAS,IAAIC,MAA/C,mBAAOZ,EAAP,KAAkBa,EAAlB,KACA,OACE,mCACE,cAAC,IAAD,CACEC,SAAUd,EACVe,WAAW,aACXC,SAAU,SAACC,GAAD,OAAUJ,EAAaI,IACjCC,gBAAiBnB,EACjBoB,YAAa,uBAAOC,KAAK,QAAQC,QAvDnB,SAACC,GACnB,GACEA,EAAMC,OAAOC,MAAMC,SAAS,MAC5BH,EAAMC,OAAOC,MAAMC,SAAS,MAC5BH,EAAMC,OAAOC,MAAMC,SAAS,KAC5B,CACA,IAAIC,EAAY,GACZnB,EAAa,GAQjB,GAPIe,EAAMC,OAAOC,MAAMC,SAAS,KAC9BC,EAAYJ,EAAMC,OAAOC,MAAMG,MAAM,KAC5BL,EAAMC,OAAOC,MAAMC,SAAS,KACrCC,EAAYJ,EAAMC,OAAOC,MAAMG,MAAM,KAC5BL,EAAMC,OAAOC,MAAMC,SAAS,OACrCC,EAAYJ,EAAMC,OAAOC,MAAMG,MAAM,MAEf,GAApBD,EAAUjB,QAAmC,GAApBiB,EAAUjB,OAAa,CAE5B,GAApBiB,EAAUjB,QACa,GAAvBmB,MAAMF,EAAU,KAChBG,SAASH,EAAU,KAAO,IACH,GAAvBE,MAAMF,EAAU,KAChBG,SAASH,EAAU,KAAO,GAE1BnB,EACEmB,EAAU,GAAK,IAAMA,EAAU,GAAK,KAAM,IAAId,MAAON,cAEnC,GAApBoB,EAAUjB,QACa,GAAvBmB,MAAMF,EAAU,KAChBG,SAASH,EAAU,KAAO,IACH,GAAvBE,MAAMF,EAAU,KAChBG,SAASH,EAAU,KAAO,IACH,GAAvBE,MAAMF,EAAU,KACO,GAAvBA,EAAU,GAAGjB,SAEbF,EAAamB,EAAU,GAAK,IAAMA,EAAU,GAAK,IAAMA,EAAU,IAEnE,IAAII,EAAS,IAAIlB,KAAKL,GACyB,kBAA3CwB,OAAOC,UAAUxB,SAASyB,KAAKH,KAC7BF,MAAME,EAAOI,YAEfrB,EAAaiB,cClEV,SAASK,IACtB,MAAwCxB,mBAAS,IAAjD,mBAAOyB,EAAP,KAAqBC,EAArB,KAIA,OACE,sBAAKC,UAAU,MAAf,UACE,2DAA8BF,KAC9B,cAAC,EAAD,CAAkB1B,gBANE,SAAC6B,GACvBF,EAAgBE,SCDpB,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACT,EAAD,MAEFK,K","file":"static/js/main.d08acf4a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction CustomDatepicker(props) {\n  useEffect(() => {\n    handleCalendarSet();\n  }, []);\n\n  const handleCalendarSet = () => {\n    if (startDate != null) {\n      const currentDayOfMonth = startDate.getDate();\n      const currentMonth = startDate.getMonth();\n      const currentYear = startDate.getFullYear();\n      let dateString =\n        (currentDayOfMonth.toString().length < 2\n          ? \"0\" + currentDayOfMonth\n          : currentDayOfMonth) +\n        \"-\" +\n        ((currentMonth + 1).toString().length < 2\n          ? \"0\" + (currentMonth + 1)\n          : currentMonth + 1) +\n        \"-\" +\n        currentYear;\n      //console.log(\"Calendar closed\", dateString);\n      props.getSeletedValue(dateString);\n    }\n  };\n\n  const handleKeyUp = (event) => {\n    if (\n      event.target.value.includes(\"-\") ||\n      event.target.value.includes(\"/\") ||\n      event.target.value.includes(\".\")\n    ) {\n      let dateArray = [];\n      let dateString = \"\";\n      if (event.target.value.includes(\"-\")) {\n        dateArray = event.target.value.split(\"-\");\n      } else if (event.target.value.includes(\"/\")) {\n        dateArray = event.target.value.split(\"/\");\n      } else if (event.target.value.includes(\".\")) {\n        dateArray = event.target.value.split(\".\");\n      }\n      if (dateArray.length == 2 || dateArray.length == 3) {\n        if (\n          dateArray.length == 2 &&\n          isNaN(dateArray[0]) == false &&\n          parseInt(dateArray[0]) <= 31 &&\n          isNaN(dateArray[1]) == false &&\n          parseInt(dateArray[1]) <= 12\n        ) {\n          dateString =\n            dateArray[1] + \"-\" + dateArray[0] + \"-\" + new Date().getFullYear();\n        } else if (\n          dateArray.length == 3 &&\n          isNaN(dateArray[0]) == false &&\n          parseInt(dateArray[0]) <= 31 &&\n          isNaN(dateArray[1]) == false &&\n          parseInt(dateArray[1]) <= 12 &&\n          isNaN(dateArray[2]) == false &&\n          dateArray[2].length == 4\n        ) {\n          dateString = dateArray[1] + \"-\" + dateArray[0] + \"-\" + dateArray[2];\n        }\n        let setVal = new Date(dateString);\n        if (Object.prototype.toString.call(setVal) === \"[object Date]\") {\n          if (isNaN(setVal.getTime())) {\n          } else {\n            setStartDate(setVal);\n          }\n        }\n      }\n    }\n  };\n\n  const [startDate, setStartDate] = useState(new Date());\n  return (\n    <>\n      <DatePicker\n        selected={startDate}\n        dateFormat=\"dd-MM-yyyy\"\n        onSelect={(date) => setStartDate(date)}\n        onCalendarClose={handleCalendarSet}\n        customInput={<input type=\"input\" onKeyUp={handleKeyUp} />}\n      />\n    </>\n  );\n}\nexport default CustomDatepicker;\n","import React, { useState } from \"react\";\nimport CustomDatepicker from \"./CustomDatepicker\";\n\nexport default function App() {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const getSeletedValue = (val) => {\n    setSelectedDate(val);\n  };\n  return (\n    <div className=\"App\">\n      <div>Hello! selected date is {selectedDate}</div>\n      <CustomDatepicker getSeletedValue={getSeletedValue} />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}